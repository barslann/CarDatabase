Server
        Spring Boot uses the Apache Tomcat as an application server by default! As a default, Tomcat is running on port 8080.
        We can change the port in the application.properties file.
            server.port = 8081 _> this will start Tomcat on port 8081!

        If the port is occupied, the application wont start!

Logger
        Spring Boot starter packages provide a logback that we can use for logging without any configuration.
        Logging message can be seen in the console after running the project
                private static final Logger LOGGER = LoggerFactory.getLogger(CarDatabaseApplication.class);
                LOGGER.info("Application started!");


Dependency Injection
    DI makes classes loosely coupled.This means that the creation of client dependencies is separated from the client's behavior.
    which makes unit testing easier.

    There are different types of DI, for example, the following two types

    1. Constructor Injection
        Dependencies are passed to a client class constructor.
    2. Setter Injection
        Dependencies are provided through setters.

DI in Spring Boot
    Spring Boot scans your application classes and register classes with certain annotations (@Service, @Repository, @Controller) as Spring Beans.
    This beans can be injected using an @Autowired annotation


    Java provides @Resource anotation that can be used to inject resources!


Basics of ORM, JPA, and Hibernate
    ORM is a technique that allows you yo fetch from and manipulate a database by using an object-oriented programming paradigm!
    It relies on object-oriented concepts rather than database structure. It also makes development much faster and reduces the amount of source code.
    ORM is mostly independent of databases.


    JPA provides object-relational mapping for Java developers. The JPA entity is a Java class that presents the structure of a database table.
    The fields of an entity class present the columns of the database tables.


    Hibernate is the most popular JAVA-based JPA implementation, adn is used in Spring boot as a default.

Basics of REST
    Representational State Transfer(REST) is an architectural style for creating web services. REST is not standard but it defines a set of constraints defined by Roy Fielding.
    The six constraints
        1.Stateless -> The server doesnt hold any information about the client state
        2.Client Server -> The client and server act independently. The server does not send any information without a request from the client
        3.Cacheable-> Many clients often request the same resources;therefore, it is useful to cache responses in order to improve performance.
        4. Uniform Interface -> Requests from different clients look the same. Clients may include for example, a browser, a JAva application and a mobile application
        5. Layered System -> REST allows us to use a layered system architecture
        6.Code on demands -> This is an optional constraint.

    The uniform interface is an important constraint and it stipulates that every REST architecture should have the following elements.
        1. Identification of Resources -> There are resources with their unique identifiers, for example, URIs in web based REST services.
        REST resources should expose easily understood directory structure URIs.Therefore, a good resource namin strattegy is important.

        2. Resource manipulation through representation -> When making a request to a resource, the server responds with a representation of the resource.
        Typically, the format of the representation is JSON or XML

        3. Self descriptive messages.

        4. Hypermedia and the Engine of Application State(HATEOAS): Responses can contain links to other areas of service.

Spring Data REST
    It offers and easy and fast way to implement RESTful web services with Soring
    By default, Spring Data REST finds all public repositories from the application and creates RESTful web services for your entities automatically.

    We can define the endpoint of service in our applicaton.properties file as follows:
        spring.data.rest.basePath = /api

    Now, we can access the RESTful web service from the localhost:8080/api endpoint. By calling the root endpoint of the service, it returns the resources that are available
    Spring Data REST returns json data in the Hypertext Application Language(HAL) format. The HAL provides a set of conventions for expressing  hyperlinks in JSON and it makes
    our RESTful web service easier to use for frontend developers

Spring Security
    Spring security provides security services for java based web applications. By default, spring security enables the following features
        -An AuthenticationManager bean with an in memory single user. The username is user and the password is printed on the console output.
        -Ignored paths for common static resource locations such as /css and /images
        -Http basic security for all other endpoints.
        -Security events published on Spring's ApplicationEventPublisher
        -Common low-level feature are on the by default(HSTS, XSS, CSRF, and so forth)

    To configure how Spring security behaves, we have to add a new configuration class that extends WebSecurityConfigurerAdapter.

    The user of in-memory users is good in the development phase, but the real application should save the users in the database.
    To save the users to database, you have to create a user entity class and repository. Password shouldn't be saved to the database in plain text format.
    Spring security provides multiple hashing algorithms, such as BCrypt, that you can use to hash passwords.

JWT(Json Web Token)
    JWT is a compact way to implement authentication in modern web applications.
    JWT is really small in size and can therefore be sent in the URL, in the POST parameter, or inside the header
    It also contains all the necessary information pertaining to the user.

    The Json web token contains three different parts, separated by dots:
        1. The first part is the header that defines the type of the token and the hashing algorithm.
        2.The second part is the payload that, typically, in the case of authentication, contains information pertaining to the user
        3. The third part is the signature that is used to verify that the token hasn't been changed along the way.

        Process
            1. User sign-in using the username and password
            2. The server authenticate the user and JWt token is crated and sent to user

        After successfully authentication, the requests sent by the user should always contains the JWT token that was received in authentication

        We will use Java JWT library, which is the JWT library for Java and Android. We have to add dependency to the pom.xml
