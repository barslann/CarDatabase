Server
        Spring Boot uses the Apache Tomcat as an application server by default! As a default, Tomcat is running on port 8080.
        We can change the port in the application.properties file.
            server.port = 8081 _> this will start Tomcat on port 8081!

        If the port is occupied, the application wont start!

Logger
        Spring Boot starter packages provide a logback that we can use for logging without any configuration.
        Logging message can be seen in the console after running the project
                private static final Logger LOGGER = LoggerFactory.getLogger(CarDatabaseApplication.class);
                LOGGER.info("Application started!");


Dependency Injection
    DI makes classes loosely coupled.This means that the creation of client dependencies is separated from the client's behavior.
    which makes unit testing easier.

    There are different types of DI, for example, the following two types

    1. Constructor Injection
        Dependencies are passed to a client class constructor.
    2. Setter Injection
        Dependencies are provided through setters.

DI in Spring Boot
    Spring Boot scans your application classes and register classes with certain annotations (@Service, @Repository, @Controller) as Spring Beans.
    This beans can be injected using an @Autowired annotation


    Java provides @Resource anotation that can be used to inject resources!


Basics of ORM, JPA, and Hibernate
    ORM is a technique that allows you yo fetch from and manipulate a database by using an object-oriented programming paradigm!
    It relies on object-oriented concepts rather than database structure. It also makes development much faster and reduces the amount of source code.
    ORM is mostly independent of databases.


    JPA provides object-relational mapping for Java developers. The JPA entity is a Java class that presents the structure of a database table.
    The fields of an entity class present the columns of the database tables.


    Hibernate is the most popular JAVA-based JPA implementation, adn is used in Spring boot as a default.

Basics of REST
    Representational State Transfer(REST) is an architectural style for creating web services. REST is not standard but it defines a set of constraints defined by Roy Fielding.
    The six constraints
        1.Stateless -> The server doesnt hold any information about the client state
        2.Client Server -> The client and server act independently. The server does not send any information without a request from the client
        3.Cacheable-> Many clients often request the same resources;therefore, it is useful to cache responses in order to improve performance.
        4. Uniform Interface -> Requests from different clients look the same. Clients may include for example, a browser, a JAva application and a mobile application
        5. Layered System -> REST allows us to use a layered system architecture
        6.Code on demands -> This is an optional constraint.

    The uniform interface is an important constraint and it stipulates that every REST architecture should have the following elements.
        1. Identification of Resources -> There are resources with their unique identifiers, for example, URIs in web based REST services.
        REST resources should expose easily understood directory structure URIs.Therefore, a good resource namin strattegy is important.

        2. Resource manipulation through representation -> When making a request to a resource, the server responds with a representation of the resource.
        Typically, the format of the representation is JSON or XML

        3. Self descriptive messages.

        4. Hypermedia and the Engine of Application State(HATEOAS): Responses can contain links to other areas of service.
